{"version":3,"sources":["movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA8BA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,iBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,sBAAMF,UAAU,cAAhB,SAA+BE,IAoCxBC,MArEf,YAAoD,IAAnCJ,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,OAAQQ,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SAChC,OACI,sBAAKL,UAAU,QAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEtC,sBAAKC,UAAU,eAAf,UACI,6BAAKD,IACL,qBAAKC,UAAU,eAAf,SACKI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAEjE,mBAAGP,UAAU,iBAAb,SACI,cAAC,IAAD,CACAQ,KAAMH,EACNI,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,qBCsCjBC,E,4MAlDfC,MAAQ,G,EAORC,cAAgB,WAWb,OAVc,EAAKD,MAAME,OAAOV,KAAI,SAAAH,GAEnC,OADAc,QAAQC,IAAIf,GACL,cAAC,EAAD,CACPJ,MAAOI,EAAMgB,cACbvB,OAAQO,EAAMiB,mBAEdhB,OAAQD,EAAMC,OACdC,SAAUF,EAAME,UAFXF,EAAMkB,Q,EAQfC,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLR,EADK,OAEX,EAAKS,SAAS,CACZT,WAHS,2C,EAObQ,SAAW,WAET,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKd,UACvBe,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,kEA9B1BC,KAAKX,e,+BAkCK,IACDN,EAAUiB,KAAKnB,MAAfE,OACP,OACE,qBAAKhB,UAAWgB,EAAS,MAAQ,cAAjC,SACGA,EAASiB,KAAKlB,gBAAkB,gB,GA9CvBmB,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAK1BZ,M","file":"static/js/main.d921ae24.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './movie.css';\r\n\r\nfunction movie ({title, poster, genres, synopsis}) {\r\n        return (\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie_Column\">\r\n                    <MoviePoster poster={poster} alt={title} />\r\n                </div>\r\n                <div className=\"Movie_Column\">\r\n                    <h1>{title}</h1>\r\n                    <div className=\"Movie_Genres\">\r\n                        {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                    </div>\r\n                    <p className=\"Movie_synopsis\">\r\n                        <LinesEllipsis \r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                        />\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){ // 멍청한 컴포먼트\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){ // 멍청한 컴포먼트\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n\r\nmovie.propTypes = {\r\n    title: PropTypes.string.isRequired,  //isRequired movie는 title이라는 prop을 제공하는 것이 필수로 설정\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\n// class MoviePoster extends Component { // 똑똑한 컴포먼트\r\n\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired  //isRequired movie는 poster이라는 prop을 제공하는 것이 필수로 설정\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n//         )\r\n//     }\r\n//  }\r\n\r\nexport default movie;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './movie';\n\n\nclass App extends Component {\n// 순서: (1) componentWillMount (2) render (3) componentDidMount\n// 업데이트: (1) componentWillReceiveProps (2)shouldComponentUpdate == ture (3) componentWillUpdate\n// (4) render (5) componentDidUpdate\n\nstate = {}\n\ncomponentDidMount(){\n  this._getMovies();\n}\n\n\n_renderMovies = () => {\n  const movies = this.state.movies.map(movie => {\n    console.log(movie)\n    return <Movie \n    title={movie.title_english} \n    poster={movie.medium_cover_image} \n    key={movie.id} \n    genres={movie.genres}\n    synopsis={movie.synopsis}\n    />\n   })\n   return movies\n}\n\n_getMovies = async () => { // async 안쓰면 await 작동안함\n  const movies = await this._callApi()\n  this.setState({ // callApi 작업이 완료되기 전까지는 실행하지 않음\n    movies\n  })\n}\n\n_callApi = () => {\n  // fetch = url를 에이젝스로 불러올 수 있음\n  return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count') // promise\n  .then(response => response.json()) // 위의 작업이 끝나면, then 볼러오기 // 제이슨으로 변환\n  .then(json => json.data.movies) //json => return json.data.movies\n  .catch(err => console.log(err)) \n  // 위의 작업이 완료되면 뭔가를 해라. 위의 작업이 에러가 있으면 잡아서 나에게 보여줘\n}\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n      // 찾고 있는 데이터가 있는지 체크하고, ? = 자바스크립트에게 물어보는 것\n      // 만약 참이라면 영화 정보를 출력하고, 거짓이라면 '로딩중' 텍스트만\n    )\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// ReactDOM은 1개의 컴포넌트를 출력 (render)\n\nreportWebVitals();\n"],"sourceRoot":""}